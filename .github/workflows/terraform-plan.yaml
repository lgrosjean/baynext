# Source: https://github.com/hashicorp/setup-terraform/tree/v3/
name: "Terraform Plan"

on:
  pull_request:
    paths:
      - 'terraform/**'

defaults:
  run:
    working-directory: terraform

env:
  NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
  TF_VAR_auth_secret: ${{ secrets.AUTH_SECRET }}
  TF_VAR_blob_read_write_token: ${{ secrets.VERCEL_TOKEN }}
  TF_VAR_ml_api_secret_api_key: ${{ secrets.ML_API_SECRET_API_KEY }}

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: Terraform Plan
    runs-on: ubuntu-latest

    steps:
        - uses: actions/checkout@v4

        - name: Authenticate to Google Cloud with OIDC
          id: auth
          uses: google-github-actions/auth@v2
          with:
            credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

        - uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: 1.6.6

        - name: Terraform fmt
          id: fmt
          run: terraform fmt -check
          
        - name: Terraform Init
          id: init
          run: terraform init
          
        - name: Terraform Validate
          id: validate
          run: terraform validate -no-color
          
        - name: Terraform Plan
          id: plan
          run: terraform plan -no-color -var="project_id=${{ env.GCP_PROJECT }}"

        - uses: actions/github-script@v7
          if: github.event_name == 'pull_request'
          env:
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          with:
            github-token: ${{ github.token }}
            script: |
                // 1. Retrieve existing bot comments for the PR
                const { data: comments } = await github.rest.issues.listComments({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                })
                const botComment = comments.find(comment => {
                    return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
                })

                // 2. Prepare format of the comment
                const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                <details><summary>Validation Output</summary>

                \`\`\`\n
                ${{ steps.validate.outputs.stdout }}
                \`\`\`

                </details>

                #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

                <details><summary>Show Plan</summary>

                \`\`\`\n
                ${process.env.PLAN}
                \`\`\`

                </details>

                *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

                // 3. If we have a comment, update it, otherwise create a new one
                if (botComment) {
                    github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: botComment.id,
                    body: output
                    })
                } else {
                    github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                    })
                }